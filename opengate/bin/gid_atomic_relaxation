#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import opengate as gate
import click
import matplotlib.pyplot as plt
import pandas

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument("rad_name", nargs=-1)
@click.option("--output", "-o", default=None, help="output file")
@click.option(
    "--store_data/--no-store_data",
    is_flag=True,
    default=False,
    help="Store data in the opengate folder",
)
@click.option(
    "--store_all",
    is_flag=True,
    default=False,
    help="Store all main nuclide data in the opengate folder",
)
@click.option("--verbose/--no-verbose", is_flag=True, default=False, help="Print data")
@click.option("--plot/--no-plot", is_flag=True, default=True, help="Plot data")
@click.option(
    "--web/--no-web",
    is_flag=True,
    default=False,
    help="Get data from IAEA web site or from the local gate installation if False)",
)
def go(rad_name, output, store_all, store_data, plot, verbose, web):
    """
    Display (or store) the atomic relaxation gamma spectra for a given radionuclide.

    Data are retrieved from https://www-nds.iaea.org/relnsd/vcharthtml/VChartHTML.html

    By default, data are stored in text files in the folder: opengate/opengate/data/atomic_relaxation
    """

    if store_all:
        gate.atomic_relaxation_get_and_store_main_radionuclides()
        exit()

    if len(rad_name) != 1:
        gate.fatal(f"Please, provide one radionuclide, such as bi213")

    # get nuclide, a, z
    nuclide = gate.get_nuclide_from_name(rad_name[0])
    name = nuclide.nuclide[: nuclide.nuclide.index("-")]

    # retrieve the data from the iaea website
    if web:
        df = gate.atomic_relaxation_get_gammas_from_iaea_website(nuclide.A, name)
        ene, weights = gate.atomic_relaxation_get_ene_weights_from_df(df)
        # print
        if verbose:
            pandas.set_option("display.max_rows", None)
            pandas.set_option("display.max_columns", None)
            print(df)
        # store ?
        if store_data:
            gate.atomic_relaxation_store(nuclide.nuclide, df)

    else:
        try:
            ene, weights = gate.atomic_relaxation_load(nuclide.nuclide)
        except Exception as exception:
            gate.fatal(
                f"Cannot get this radionuclide {nuclide.nuclide}, try with --web option ? "
                f"\n{exception}"
            )

    keV = gate.g4_units("keV")
    if verbose:
        i = 0
        for e, w in zip(ene, weights):
            print(f"{i} Energy {e / keV:.3f} keV     {w * 100:.3f} %")
            i += 1

    # plot
    if plot:
        f, ax = plt.subplots(1, 1, figsize=(15, 5))
        ax.bar(ene / keV, height=weights * 100, width=0.1, label=f"{nuclide.nuclide}")
        ax.set_xlabel("Energy in keV")
        ax.set_ylabel("Intensity in %")
        ax.legend()
        if output:
            print(f"Output plot in {output}")
            f.savefig(output)
        else:
            plt.show()


# --------------------------------------------------------------------------
if __name__ == "__main__":
    go()
