#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
import json
import itk
import opengate.contrib.phantoms.nemaiec as gate_iec
from opengate.managers import Simulation
from opengate.engines import SimulationEngine
from opengate.logger import log, NONE
from opengate.utility import g4_units, print_dic
from opengate.image import (
    create_image_with_volume_extent,
    get_info_from_image,
    voxelize_volume,
)

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.option("--spacing", "-s", default=4, help="Spacing in mm")
@click.option("--output", "-o", required=True, help="output filename (.mhd)")
def go(output, spacing):
    # create the simulation
    sim = Simulation()

    # shhhht !
    log.setLevel(NONE)

    # world
    m = g4_units.m
    sim.world.size = [1 * m, 1 * m, 1 * m]

    # add a iec phantom
    iec = gate_iec.add_iec_phantom(sim)

    # create an empty image with the size (extent) of the volume
    # add one pixel margin
    image = create_image_with_volume_extent(
        sim, iec.name, spacing=[spacing, spacing, spacing], margin=1
    )
    info = get_info_from_image(image)
    print(f"Image : {info.size} {info.spacing} {info.origin}")

    # voxelized a volume
    print("Starting voxelization ...")
    se = SimulationEngine(sim)
    labels, image = voxelize_volume(se, image)
    print(f"Output labels: ")
    print_dic(labels)

    # write labels
    lf = output.replace(".mhd", ".json")
    outfile = open(lf, "w")
    json.dump(labels, outfile, indent=4)

    # write image
    print(f"Write image {output}")
    itk.imwrite(image, output)


# --------------------------------------------------------------------------
if __name__ == "__main__":
    go()
